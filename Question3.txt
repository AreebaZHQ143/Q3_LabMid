using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;

class SymbolEntry
{
    public string Type { get; set; }          // Data type (e.g., int, float)
    public string VariableName { get; set; }  // Variable name (e.g., val33)
    public string Value { get; set; }         // Assigned value (e.g., 999)
    public int LineNumber { get; set; }       // Line number in code
}

class Program
{
    static void Main()
    {
        List<SymbolEntry> symbolTable = new List<SymbolEntry>();
        int lineNumber = 1;

        Console.WriteLine("Enter lines of code (type 'end' to stop):");

        while (true)
        {
            Console.Write($"Line {lineNumber}: ");
            string input = Console.ReadLine();

            if (input.ToLower() == "end")
                break;

            // Match input like: int val33 = 999;
            string pattern = @"^(int|float|char|string)\s+(\w+)\s*=\s*(.+);$";
            Match match = Regex.Match(input, pattern);

            if (match.Success)
            {
                string type = match.Groups[1].Value;
                string variableName = match.Groups[2].Value;
                string value = match.Groups[3].Value;

                if (ContainsPalindrome(variableName))
                {
                    symbolTable.Add(new SymbolEntry
                    {
                        Type = type,
                        VariableName = variableName,
                        Value = value,
                        LineNumber = lineNumber
                    });
                }
            }

            lineNumber++;
        }

        // Display symbol table
        Console.WriteLine("\nSymbol Table (Variables with palindrome substrings ≥ 3):");
        Console.WriteLine("{0,-15} | {1,-10} | {2,-10} | {3}", "Variable Name", "Type", "Value", "Line No");
        Console.WriteLine(new string('-', 60));

        foreach (var entry in symbolTable)
        {
            Console.WriteLine($"{entry.VariableName,-15} | {entry.Type,-10} | {entry.Value,-10} | {entry.LineNumber}");
        }
    }

    // Custom method to check if a string contains any palindrome substring of length ≥ 3
    static bool ContainsPalindrome(string input)
    {
        int length = input.Length;

        for (int i = 0; i < length; i++)
        {
            for (int j = i + 2; j < length; j++) // substrings of at least length 3
            {
                string sub = input.Substring(i, j - i + 1);
                if (IsPalindrome(sub))
                    return true;
            }
        }

        return false;
    }

    // Custom method to check if a string is a palindrome
    static bool IsPalindrome(string str)
    {
        int start = 0;
        int end = str.Length - 1;

        while (start < end)
        {
            if (str[start] != str[end])
                return false;

            start++;
            end--;
        }

        return true;
    }
}
